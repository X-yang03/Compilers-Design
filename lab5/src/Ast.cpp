#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

// func
Type* returnType = nullptr;
bool funcReturned = false;
static int inIteration = 0;

Node::Node()
{
    seq = counter++;
}
void Node::backPatch(std::vector<BasicBlock**> &list, BasicBlock*target)
{
    for(auto &bb:list)
        *bb = target;
}

std::vector<BasicBlock**> Node::merge(std::vector<BasicBlock**> &list1, std::vector<BasicBlock**> &list2)
{
    std::vector<BasicBlock**> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
   
}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if(op == OR)
    {
        // Todo
    }
    else if(op >= LESS && op <= GREATER)
    {
        // Todo
    }
    else if(op >= ADD && op <= SUB)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void UnaryOpExpr::genCode()
{

}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void ArrayIndiceNode::genCode(){

}

void ArrayinitNode::genCode(){

}

void DefNode::genCode(){

}



void IfStmt::genCode()
{
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // Todo
}


void WhileStmt::genCode(){

}


void ContinueStmt::genCode(){

}

void BreakStmt::genCode(){

}

void CompoundStmt::genCode()
{
    // Todo
}

void SeqNode::genCode()
{
    // Todo
}

void EmptyStmtNode::genCode(){

}

void FuncDefParamsNode::genCode(){

}


void FuncCallParamsNode::genCode(){

}

void FuncCallNode::genCode(){

}

void ExprStmtNode::genCode(){

}

void DeclStmt::genCode()
{
    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if(se->isGlobal())
    {
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
    }
    else if(se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        Operand *addr;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
        entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
}

void ReturnStmt::genCode()
{
    // Todo
}

void AssignStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
}

void Ast::typeCheck()
{
    if(root != nullptr)
        root->typeCheck();
}

//check wheater return or return type is right
//add return for void
//like 
//void funcname(){} is acc
void FunctionDef::typeCheck()
{
    // Todo
    // 获取函数的返回值类型
    returnType = ((FunctionType*)se->getType())->getRetType();
    // 判断函数是否返回
    funcReturned = false;
    stmt->typeCheck();
    // 非void类型的函数需要有返回值
    if(!funcReturned && !returnType->isVoid()){
        fprintf(stderr, "expected a %s type to return, but nWo returned value found\n", returnType->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    // 如果void类型没写return需要补上
    if(!funcReturned && returnType->isVoid()) {
        this->voidAddRet = new ReturnStmt(nullptr);
    }
    returnType = nullptr;
}

void UnaryOpExpr::typeCheck(){
    //Todo
    expr->typeCheck();
    //检查是否void函数返回值参与运算
    Type* realType = expr->getType()->isFunc() ? 
        ((FunctionType*)expr->getType())->getRetType() : 
        expr->getType();
    if(!realType->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    //推断父节点类型
    if(realType->isAnyFloat()) {
        this->setType(TypeSystem::floatType);
    }
    else{
        this->setType(TypeSystem::intType);
    }
    // 如果是not运算
    if(op == NOT) {
        this->setType(TypeSystem::boolType);
    }
    //如果父节点不需要这个值，直接返回
    // if(parentToChild==nullptr){
    //     return;
    // }
    if(this->getSymPtr() == nullptr){
        return ;
    }
    //孩子节点为常数，计算常量值，替换节点
    if(realType->isAnyConst()){
        SymbolEntry *se;
        double val = 0;
        int initValue = expr->getSymPtr()->isConstant() ? 
            ((ConstantSymbolEntry*)(expr->getSymPtr()))->getValue() : 
            ((IdentifierSymbolEntry*)(expr->getSymPtr()))->value;
        switch (op) 
        {
        case SUB:
            val = -initValue;
        break;
        case NOT:
            val = !initValue;
        break;
        }
        if(this->getType()->isInt()){
            se = new ConstantSymbolEntry(TypeSystem::constIntType, val);
        }
        else{//float or bool
            se = new ConstantSymbolEntry(TypeSystem::constFloatType, val);
        }
        // Constant* newNode = new Constant(se);
        // *parentToChild = newNode;
        setSymPtr(se);
        //delete this;
    }
}

void BinaryExpr::typeCheck()
{
    // Todo
    //父结点需要检查孩子结点的类型
    this->expr1->typeCheck();
    this->expr2->typeCheck();

    //并根据孩子结点类型确定自身类型
    //检查是否void函数返回值参与运算
    Type* realTypeLeft = expr1->getType()->isFunc() ? 
        ((FunctionType*)expr1->getType())->getRetType() : 
        expr1->getType();
    if(!realTypeLeft->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr1->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    Type* realTypeRight = expr2->getType()->isFunc() ? 
        ((FunctionType*)expr2->getType())->getRetType() : 
        expr2->getType();
    if(!realTypeRight->calculatable()){
        fprintf(stderr, "type %s is not calculatable!\n", expr2->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    // 在语法解析阶段就对父节点和孩子节点的类型进行了相应的转换设置
    // 在类型检查阶段就没有必要再对这部分进行检查了
    // 可以对mod取模运算检查一下是否有浮点参与
    if(op == MOD) {
        if(!(realTypeLeft->isAnyInt() && realTypeRight->isAnyInt())) {
            fprintf(stderr, "mod is not supported with float or bool operands!\n");
            exit(EXIT_FAILURE);
        }
    }
    // 推断父节点类型
    // bool型一律按float处理
    // TODO：增加bool类型处理?
    // if(realTypeLeft->isBool() && realTypeRight->isBool()){
    //     //别忘了两边一边是bool一边是int/float的情况
    // }
    // if(realTypeLeft->isAnyInt() && realTypeRight->isAnyInt()) {
    //     this->setType(TypeSystem::intType);
    // }
    // else{
    //     if(op==MOD){//浮点值参与取模运算
    //         fprintf(stderr, "mod is not supported with float or bool operands!\n");
    //         exit(EXIT_FAILURE);
    //     }
    //     this->setType(TypeSystem::floatType);
    // }
    // we comment
    // 如果父节点不需要这个值，直接返回
    // if(parentToChild==nullptr){
    //     return;
    // }
    if(this->getSymPtr() == nullptr){
        return ;
    }
    //左右子树均为常数，计算常量值，替换节点
    if(realTypeLeft->isAnyConst() && realTypeRight->isAnyConst()){
        SymbolEntry *se;
        // 如果该节点结果的目标类型为bool
        if(this->getType()->isBool()) {
            bool val = 0;
            float leftValue = expr1->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr1->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr1->getSymPtr()))->value;
            float rightValue = expr2->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr2->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr2->getSymPtr()))->value;
            switch(op)
            {
            case AND:
                val = leftValue && rightValue;
            break;
            case OR:
                val = leftValue || rightValue;
            break;
            case LESS:
                val = leftValue < rightValue;
            break;
            case LE:
                val = leftValue <= rightValue;
            break;
            case GREATER:
                val = leftValue > rightValue;
            break;
            case GE:
                val = leftValue >= rightValue;
            break;
            case EQ:
                val = leftValue == rightValue;
            break;
            case NEQ:
                val = leftValue != rightValue;
            break;
            }
            //se = new ConstantSymbolEntry(TypeSystem::constBoolType, val);
            se = new ConstantSymbolEntry(TypeSystem::boolType, val);
        }
        // 如果该节点结果的目标类型为int
        else if(this->getType()->isInt()){
            int val = 0;
            int leftValue = expr1->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr1->getSymPtr()))->getValue() : //字面值常量
                ((IdentifierSymbolEntry*)(expr1->getSymPtr()))->value;  //符号常量
            int rightValue = expr2->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr2->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr2->getSymPtr()))->value;
            switch (op) 
            {
            case ADD:
                val = leftValue + rightValue;
            break;
            case SUB:
                val = leftValue - rightValue;
            break;
            case MUL:
                val = leftValue * rightValue;
            break;
            case DIV:
                val = leftValue / rightValue;
            break;
            case MOD:
                val = leftValue % rightValue;
            break;
            // case AND:
            //     val = leftValue && rightValue;
            // break;
            // case OR:
            //     val = leftValue || rightValue;
            // break;
            // case LESS:
            //     val = leftValue < rightValue;
            // break;
            // case LESSEQ:
            //     val = leftValue <= rightValue;
            // break;
            // case GREAT:
            //     val = leftValue > rightValue;
            // break;
            // case GREATEQ:
            //     val = leftValue >= rightValue;
            // break;
            // case EQ:
            //     val = leftValue == rightValue;
            // break;
            // case NEQ:
            //     val = leftValue != rightValue;
            // break;
            }
            se = new ConstantSymbolEntry(TypeSystem::constIntType, val);
        }
        // 如果该节点结果的目标类型为float
        else{
            float val = 0;
            float leftValue = expr1->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr1->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr1->getSymPtr()))->value;
            float rightValue = expr2->getSymPtr()->isConstant() ? 
                ((ConstantSymbolEntry*)(expr2->getSymPtr()))->getValue() : 
                ((IdentifierSymbolEntry*)(expr2->getSymPtr()))->value;
            switch (op) 
            {
            case ADD:
                val = leftValue + rightValue;
            break;
            case SUB:
                val = leftValue - rightValue;
            break;
            case MUL:
                val = leftValue * rightValue;
            break;
            case DIV:
                val = leftValue / rightValue;
            break;
            // case MOD:
            //     fprintf(stderr, "mod is not supported with float or bool operands!");
            //     exit(EXIT_FAILURE);
            // break;
            // case LESS:
            //     val = leftValue < rightValue;
            // break;
            // case LESSEQ:
            //     val = leftValue <= rightValue;
            // break;
            // case GREAT:
            //     val = leftValue > rightValue;
            // break;
            // case GREATEQ:
            //     val = leftValue >= rightValue;
            // break;
            // case EQ:
            //     val = leftValue == rightValue;
            // break;
            // case NEQ:
            //     val = leftValue != rightValue;
            // break;
            }
            se = new ConstantSymbolEntry(TypeSystem::constFloatType, val);
        }
        //we comment
        // Constant* newNode = new Constant(se);
        // *parentToChild = newNode;
        this->setSymPtr(se);
    }
    // 调整 && 和 || 运算符的两个操作数
    // 操作数类型不为 bool，或者se是一个常量bool
    // 则说明此时的情况为 a || 1 或者 a && a + b
    // 增加一个和1的EQ判断
    if(op == AND || op == OR) {
        if(!expr1->getSymPtr()->getType()->isBool() || expr1->getSymPtr()->isConstant()) {
            Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::NEQ, zeroNode, expr1);
            expr1 = newCond;
        }
        if(!expr2->getSymPtr()->getType()->isBool() || expr2->getSymPtr()->isConstant()) {
            Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
            TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::NEQ, zeroNode, expr2);
            expr2 = newCond;
        }
    }
}

void Constant::typeCheck()
{
    // Todo
    // if(!this->dst->getType()->isAnyConst()){
    //     fprintf(stderr, "type %s is not const!\n", dst->getType()->toStr().c_str());
    //     exit(EXIT_FAILURE);
    // }
}

void ArrayIndiceNode::typeCheck(){
    //Todo
    for(int i = 0;i<(int)this->arrindexList.size();++i){
        arrindexList[i]->typeCheck();
    }
}

void ArrayinitNode::typeCheck() {
    //Todo
    if (isLeaf()) {
        // 处理叶节点的类型检查逻辑
        // 检查 leafNode 的类型是否与数组类型匹配
        if (leafNode == nullptr) {
            // 叶节点为空，抛出错误或进行相应处理
            fprintf(stderr, "type is a panic as nullptr(ArrayinitNode::typecheck)!\n");
            exit(EXIT_FAILURE);
        } else {
            // 执行叶节点的类型检查
            leafNode->typeCheck();

            // 根据实际需求，需要进一步检查 leafNode 的类型与数组类型是否匹配
        }
    } else {
        // 处理内部节点的类型检查逻辑
        // 遍历 innerList，对每个子节点执行类型检查
        for (ArrayinitNode* child : innerList) {
            child->typeCheck();
            // 根据实际需求，需要进一步检查子节点的类型与数组类型是否匹配
        }
    }
}

void DefNode::typeCheck(){
    //todo
    id->typeCheck();
    // 不赋初值，直接返回
    if(initVal==nullptr){
        return;
    }
    initVal->typeCheck();
    if(!id->getType()->isArray()){//不是数组时，右边可能出现函数：int a = f();
        if(((ExprNode*)initVal)->getType()->isFunc() && 
            (!((FunctionType*)(((ExprNode*)initVal)->getType()))->getRetType()->calculatable())){//右边是个为返回值空的函数
            fprintf(stderr, "expected a return value, but functionType %s return nothing\n", ((ExprNode*)initVal)->getType()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
    }
    if(id->getType()->isAnyConst()){
        // 判断是否用变量给常量赋值
        if(!isArray) {
            if(!((ExprNode*)initVal)->getType()->isAnyConst()) {
                fprintf(stderr, "attempt to initialize variable value to const\n");
                exit(EXIT_FAILURE);
            }
        }
        else{
            //Todo Array init
            // if(!((InitValNode*)initVal)->isConst()) {
            //     fprintf(stderr, "attempt to initialize variable value to const\n");
            //     exit(EXIT_FAILURE);
            // }
        }
        // 接下来就是常量计算的工作了
        // 数组初始化值 暂时不打算做了
        if(id->getType()->isArray()){
            //TODO: initialize elements in symbol table
        }
        // 常量初始化值
        else{
            IdentifierSymbolEntry* se = (IdentifierSymbolEntry*)id->getSymPtr();
            se->value = ((ConstantSymbolEntry*)((ExprNode*)initVal)->getSymPtr())->getValue();
        }   
    }
    // 如果是全局变量，也要根据需要赋值
    if(dynamic_cast<IdentifierSymbolEntry*>(id->getSymPtr())->isGlobal()) {
        // 对于初始化值不为空的，要进行初始化赋值
        if(initVal != nullptr) {
            // 只允许使用常量对全局变量进行赋值
            if(!((ExprNode*)initVal)->getType()->isAnyConst()) {
                fprintf(stderr, "not allow to initialize global variable with not const value\n");
                exit(EXIT_FAILURE);
            }
            IdentifierSymbolEntry* se = (IdentifierSymbolEntry*)id->getSymPtr();
            se->value = ((ConstantSymbolEntry*)((ExprNode*)initVal)->getSymPtr())->getValue();
        }
    }
}

void Id::typeCheck()
{
    // Todo
    // 如果是一个普通变量就什么也不做
    // 如果是数组 要看看维度信息有没有初始化
    // 由于在语法解析阶段已经判断了标识符先定义再使用
    // 所以如果维度信息还未初始化则说明当前是数组定义阶段
    if(isArray() && indices!=nullptr){
        indices->typeCheck();
        // 检查indices下的exprList(私有域)中的每个exprNode的类型，若不为自然数则报错
        if(((IdentifierSymbolEntry*)getSymPtr())->arrayDimension.empty()){
            //indices->initDimInSymTable((IdentifierSymbolEntry*)getSymPtr());
        }
        // 读取常量数组 这个不打算做了
        else if(getType()->isAnyConst()){
            //TODO: 将常量数组+全常量下标的数组元素访问替换为字面值常量节点Constant
            //STEP：1.遍历indices下的exprList(私有域)，查看是否有非常量节点。若有，直接返回
            //STEP: 2.若全部为常量下标，替换
        }
    }
}

void IfStmt::typeCheck()
{
    // Todo
    cond->typeCheck();
    // 如果cond中的se的类型不为 bool，或者se是一个常量bool
    // 则说明此时的情况为 if(a) 或者 if(1) 或者 if(a+1)
    // 增加一个和1的EQ判断
    if(!cond->getSymPtr()->getType()->isBool() || cond->getSymPtr()->isConstant()) {
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::NEQ, zeroNode, cond);
        cond = newCond;
    }
    if(thenStmt!=nullptr) {
        thenStmt->typeCheck();
    }
    else {
        thenStmt = new EmptyStmtNode();
    }
}

void IfElseStmt::typeCheck()
{
    // Todo
    cond->typeCheck();
    // 如果cond中的se的类型不为 bool，或者se是一个常量bool
    // 则说明此时的情况为 if(a) 或者 if(1) 或者 if(a+1)
    // 增加一个和1的EQ判断
    if(!cond->getSymPtr()->getType()->isBool() || cond->getSymPtr()->isConstant()) {
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::NEQ, zeroNode, cond);
        cond = newCond;
    }
    if(thenStmt!=nullptr) {
        thenStmt->typeCheck();
    }
    else {
        thenStmt = new EmptyStmtNode();
    }
    if(elseStmt!=nullptr){
        elseStmt->typeCheck();
    }
    else {
        elseStmt = new EmptyStmtNode();
    }
}

void WhileStmt::typeCheck(){
    cond->typeCheck();
    // 如果cond中的se的类型不为 bool，或者se是一个常量bool
    // 则说明此时的情况为 if(a) 或者 if(1) 或者 if(a+1)
    // 增加一个和1的EQ判断
    if(!cond->getSymPtr()->getType()->isBool() || cond->getSymPtr()->isConstant()) {
        Constant* zeroNode = new Constant(new ConstantSymbolEntry(TypeSystem::constIntType, 0));
        TemporarySymbolEntry* tmpSe = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        BinaryExpr* newCond = new BinaryExpr(tmpSe, BinaryExpr::NEQ, zeroNode, cond);
        cond = newCond;
    }
    if(Stmt!=nullptr) {
        inIteration++;
        Stmt->typeCheck();
        inIteration--;
    }
    else {
        Stmt = new EmptyStmtNode();
    }
}

void ContinueStmt::typeCheck(){
    if(!inIteration){
        fprintf(stderr, "continue statement outside iterations\n");
        exit(EXIT_FAILURE);
    }
}

void BreakStmt::typeCheck(){
    if(!inIteration){
        fprintf(stderr, "break statement outside iterations\n");
        exit(EXIT_FAILURE);
    }
}

void CompoundStmt::typeCheck()
{
    // Todo
    if(stmt!=nullptr){
        stmt->typeCheck();
    }
    else {
        stmt = new EmptyStmtNode();
    }
}


void SeqNode::typeCheck()
{
    // Todo
    stmt1->typeCheck();
    stmt2->typeCheck();
}

void DeclStmt::typeCheck()
{
    // Todo
    for(int i = 0;i<(int)defList.size();++i){
        defList[i]->typeCheck();
    }
}

void ReturnStmt::typeCheck()
{
    // Todo
    //fprintf(stderr, "%s %s\n", returnType->toStr().c_str(), retValue->getType()->toStr().c_str());
    if(returnType == nullptr){//not in a fuction
        fprintf(stderr, "return statement outside functions\n");
        exit(EXIT_FAILURE);
    }
    else if(returnType->isVoid() && retValue!=nullptr){//returned a value in void()
        fprintf(stderr, "value returned in a void() function\n");
        exit(EXIT_FAILURE);
    }
    else if((!returnType->isVoid()) && (retValue==nullptr)){//expected returned value, but returned nothing
        fprintf(stderr, "expected a %s type to return, but returned nothing\n", returnType->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(!returnType->isVoid()){
        retValue->typeCheck();
    }
    this->retType = returnType;
    funcReturned = true;
}

void AssignStmt::typeCheck()
{
    // Todo
    lval->typeCheck();
    expr->typeCheck();
    if(lval->getType()->isAnyConst()) {
        fprintf(stderr, "Unable to assign value to const variable %s\n", lval->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    if(expr->getType()->isFunc() && ((FunctionType*)(expr->getType()))->getRetType()->isVoid()){//返回值为void的函数做运算数
        fprintf(stderr, "expected a return value, but functionType %s returns nothing\n", expr->getType()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
}

void EmptyStmtNode::typeCheck(){
    //we need not do anything here right???
}

void FuncDefParamsNode::typeCheck(){
    //we need not do anything here right???
}

void FuncCallParamsNode::typeCheck(){
    for(ExprNode* param : paramsList) {
        param->typeCheck();
    }
}

void FuncCallNode::typeCheck(){
 std::vector<Type*> funcParamsType = (dynamic_cast<FunctionType*>(this->funcId->getSymPtr()->getType()))->getParamsType();
    // 首先对于无参的进行检查
    if(this->params==nullptr && funcParamsType.size() != 0){
        fprintf(stderr, "function %s call params number is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    else if(this->params==nullptr) {
        return;
    }
    // 先对FuncCallParamsNode进行类型检查，主要是完成常量计算
    this->params->typeCheck(); 
    std::vector<ExprNode*> funcCallParams = this->params->getParamsList();
    // 如果数量不一致直接报错
    if(funcCallParams.size() != funcParamsType.size()) {
        fprintf(stderr, "function %s call params number is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
        exit(EXIT_FAILURE);
    }
    // 然后进行类型匹配
    // 依次匹配类型
    for(int i = 0; i < funcParamsType.size(); i++){
        Type* needType = funcParamsType[i];
        Type* giveType = funcCallParams[i]->getSymPtr()->getType();
        // 暂时不考虑类型转化的问题 所有的类型转化均到IR生成再做
        // 除了void类型都可以进行转化
        if(!needType->calculatable() && giveType->calculatable()
         ||needType->calculatable() && !giveType->calculatable()){
            fprintf(stderr, "function %s call params type is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
        // 检查数组是否匹配
        if(!needType->isArray() && giveType->isArray()
         ||needType->isArray() && !giveType->isArray()){
            fprintf(stderr, "function %s call params type is not consistent\n",this->funcId->getSymPtr()->toStr().c_str());
            exit(EXIT_FAILURE);
        }
        //TODO: 检查数组维度是否匹配
        if(needType->isArray() && giveType->isArray()){

        }
    }
}

void ExprStmtNode::typeCheck(){
    //do we need it???
}

void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4);
}

Type* ExprNode::getType()
{
    return symbolEntry->getType();
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case AND:
            op_str = "and";
            break;
        case OR:
            op_str = "or";
            break;
        case LESS:
            op_str = "less";
            break;
        case MUL:
            op_str = "mul";
            break;
        case DIV:
            op_str = "div";
            break;
        case MOD:
            op_str = "mod";
            break;
        case LE:
            op_str = "LESS OR EQUAL";
            break;
        case GREATER:
            op_str = "greater";
            break;
        case GE:
            op_str="greater or equal";
            break;
        case EQ:
            op_str = "equal";
            break;
        case NEQ:
            op_str = "not equal";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void UnaryOpExpr::output(int level){
     std::string op_str;
    switch(op)
    {
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case NOT:
            op_str = "not";
            break;
    }
    fprintf(yyout, "%*cUnaryOpExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}

void EmptyStmtNode::output(int level)
{
    fprintf(yyout, "%*cEmptyStmt\n", level, ' ');
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

bool Id::isArray()
{
    return symbolEntry->getType()->isArray();
}

void Id::output(int level)
{
    std::string name, type;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    int scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
    if(isArray() && indices!=nullptr){
        indices->output(level+4);
    }
}

std::string Id::getName()
{
    return symbolEntry->toStr();
}

Type* Id::getType()
{
    return symbolEntry->getType();
}

void ArrayIndiceNode::append(ExprNode* next)
{
    arrindexList.push_back(next);
}

void ArrayIndiceNode::output(int level)
{
    fprintf(yyout, "%*cArrayindiceNode\n", level, ' ');
    for(auto expr : arrindexList)
    {
        expr->output(level+4);
    }
}


void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    if(stmt!=nullptr){
    stmt->output(level + 4);
    }
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    stmt1->output(level + 4);
    stmt2->output(level + 4);
}

//we add

void ArrayinitNode::output(int level)
{
    std::string constStr = isConst ? "true" : "false";
    fprintf(yyout, "%*cArrayinitNode\tisConst:%s\n", level, ' ', constStr.c_str());
    for(auto child : innerList)
    {
        child->output(level+4);
    }
    if(leafNode!=nullptr){
        leafNode->output(level+4);
    }
}


void DefNode::output(int level)
{
    std::string constStr = isConst ? "true" : "false";
    std::string arrayStr = isArray ? "true" : "false";
    fprintf(yyout, "%*cDefNode\tisConst:%s\tisArray:%s\n", level, ' ', constStr.c_str(), arrayStr.c_str());
    id->output(level+4);
    if(initVal == nullptr){
        fprintf(yyout, "%*cnull\n", level+4, ' ');
    }
    else{
        initVal->output(level+4);
    }
}

void DeclStmt::addNext(DefNode* next)
{
    defList.push_back(next);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    for(auto def : defList){
        def->output(level+4);
    }
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level){
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    Stmt->output(level + 4);    
}


void ContinueStmt::output(int level){
    fprintf(yyout,"%*cContinueStmt\n",level,' ');
}

void BreakStmt::output(int level){
    fprintf(yyout,"%*cBreakStmt\n",level,' ');
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    if(retValue!=nullptr){
        retValue->output(level + 4);
    }
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}


//WE ADD BEGIN
void FuncDefParamsNode::addNext(Id* next)
{
    paramsList.push_back(next);
}

std::vector<Type*> FuncDefParamsNode::getParamsType()
{
     std::vector<Type*> typeArray;
    for(auto param : paramsList){
        typeArray.push_back(param->getType());
    }
     return typeArray;
}

void FuncDefParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncDefParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}
//WE ADD END

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    stmt->output(level + 4);
}

void FuncCallNode::output(int level)
{
    std::string name, type;
    name = funcId->getName();
    type = funcId->getType()->toStr();
    SymbolEntry* funcEntry = funcId->getSymbolEntry();
    int scope = dynamic_cast<IdentifierSymbolEntry*>(funcEntry)->getScope();
    fprintf(yyout, "%*cFuncCallNode\tfuncName: %s\t funcType: %s\tscope: %d\n", 
            level, ' ', name.c_str(), type.c_str(), scope);
    
    if(params!=nullptr){
        params->output(level+4);
    }
    else{
        fprintf(yyout, "%*cFuncCallWithNoParams\n", level+4, ' ');
    }
}

void FuncCallParamsNode::append(ExprNode* next)
{
    paramsList.push_back(next);
}

void FuncCallParamsNode::output(int level)
{
    fprintf(yyout, "%*cFuncCallParamsNode\n", level, ' ');
    for(auto param : paramsList){
        param->output(level+4);
    }
}

void ExprStmtNode::append(ExprNode* next)
{
    exprList.push_back(next);
}

void ExprStmtNode::output(int level)
{
    fprintf(yyout, "%*cExprStmtNode\n", level, ' ');
    for(auto expr : exprList)
    {
        expr->output(level+4);
    }
}


